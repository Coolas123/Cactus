@using Cactus.Models.Database
@using Newtonsoft
@model PagingAuthorViewModel

<div class="text-center">
    @await Component.InvokeAsync("BannerPath", new { Model.CurrentUser?.Id })
    @if (Model.AuthorNotifications.EnoughBalance != null) {
        <script type="text/javascript">
            history.pushState("", document.title, window.location.pathname);
            var message = '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AuthorNotifications.EnoughBalance))'
            alert(JSON.parse(message));
        </script>
    }
    @if (ViewData["ComplainError"] != null) {
        <script>
            alert(@ViewData["ComplainError"]);
        </script>
    }
    @if (Model.AuthorNotifications.PostCreated != null) {
        <script>
            var message = '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AuthorNotifications.PostCreated))'
            alert(JSON.parse(message));
            history.pushState("", document.title, window.location.pathname);
            </script>
    }
    @if (Model.AuthorNotifications.PaidSubscribed != null) {
        <script>
            var message = '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AuthorNotifications.PaidSubscribed))'
            alert(JSON.parse(message));
            history.pushState("", document.title, window.location.pathname);
        </script>
    }
    @if (Model.AuthorNotifications.PaidGoal != null) {
        <script>
            var message = '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AuthorNotifications.PaidGoal))'
            alert(JSON.parse(message));
            history.pushState("", document.title, window.location.pathname);
        </script>
    }
    @if (Model.AuthorNotifications.Remittanced != null) {
        <script>
            var message = '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AuthorNotifications.Remittanced))'
            alert(JSON.parse(message));
            history.pushState("", document.title, window.location.pathname);
        </script>
    }
    @if (Model.AuthorNotifications.GoalDone != null) {
        <script>
            var message = '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AuthorNotifications.GoalDone))'
            alert(JSON.parse(message));
            history.pushState("", document.title, window.location.pathname);
        </script>
    }
</div>

<div class="row">
    <div class="col-lg-2">
    </div>
    <div class="col-lg-2">
        <div class="row">
            <div class="col"></div>
            <div class="col">
                <h3 class="text-center">@Model.CurrentUser.UserName</h3>
            </div>
            <div class="col">
                @if (!Model.IsOwner)
                {
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuAuthor" data-bs-toggle="dropdown" aria-expanded="false">
                            Еще
                        </button>
                        <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuAuthor">
                            @if (!Model.IsUninteresting && !Model.IsOwner && !Model.IsSubscribe) {
                                <li>
                                    <a class="dropdown-item" asp-controller="Author" asp-action="AddUninterestingAuthor" asp-route-authorId="@Model.CurrentUser.Id">
                                        Добавить в список неинтересного
                                    </a>
                                </li>
                            }
                            else if(!Model.IsSubscribe && !Model.IsOwner){
                                <li>
                                    <a class="dropdown-item" asp-controller="Author" asp-action="RemoveUninterestingAuthor" asp-route-authorId="@Model.CurrentUser.Id">
                                        Убрать из списока неинтересного
                                    </a>
                                </li>
                            }
                            @if (!Model.IsOwner)
                            {
                                <li>
                                    <div class="text-center">
                                        <button type="button" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#complainModal">
                                            Пожаловаться
                                        </button>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
        @await Component.InvokeAsync("AvatarPath", new { Model.CurrentUser.Id, html = "class=\"avatarProfile mx-auto d-block border border-dark\"" })
        @{
            var opt = Model.DonationOptions?.Where(x => x.MonetizationTypeId == (int)Cactus.Models.Enums.MonetizationType.Remittance);
            if (opt != null && opt.Any()) {
                <div class="text-center border border-secondary p-2 mb-2 rounded border-2 bg-light">
                    <p>@opt.Last().OptionName</p>
                    <p>@opt.Last().Description</p>
                    @if (!Model.IsOwner) {
                        <button id="donateBtn" value="@opt.Last().Id" onclick="sendDonate()" type="button" class="btn btn-danger m-1" data-bs-toggle="modal" data-bs-target="#remittanceModal">
                            Отправить донат
                        </button>
                    }
                </div>
            }
        }

        @if (!Model.IsSubscribe && !Model.IsOwner) {
            <div class="text-center m-1">
                <a class="btn btn-secondary" asp-controller="Author" asp-action="SubscribeToAuthor" asp-route-authorId="@Model.CurrentUser.Id">
                    Подписаться
                </a>
            </div>
        }
        @if (!Model.IsOwner && Model.IsSubscribe) {
        <div class="text-center m-1">
                <a class="btn btn-danger" asp-action="UnsubscribeToAuthor" asp-route-authorId="@Model.CurrentUser.Id">
                Отписаться
            </a>
        </div>
        }
        @if (Model.DonationOptions != null) {
            <h3>Уровни подписки</h3>
            int count = 1;
            var paidSub = Model.PaidSubscribes?.MaxBy(x => x.Donator.DonationOption.Price);
            foreach (var o in Model.DonationOptions) {
                if (o.MonetizationTypeId == (int)Cactus.Models.Enums.MonetizationType.SubLevel) {
                    <div class="border border-secondary p-2 mb-2 rounded border-2 bg-light">
                        <h4>@o.OptionName</h4>
                        @await Component.InvokeAsync("CoverPath", new { o.Id })
                        <p>@o.Description</p>
                        <p>@count-й уровень</p>
                        <p>Цена @o.Price</p>
                        @if (!Model.IsOwner && paidSub == null || !Model.IsOwner && o.Price > paidSub?.Donator.DonationOption.Price) {
                            <form asp-controller="Monetization" asp-action="SubscribePaidSub" method="post">
                                <input hidden asp-for="PaidSub.Sended" value="@o.Price" />
                                <input hidden asp-for="PaidSub.AuthorId" value="@Model.CurrentUser.Id" />
                                <input hidden asp-for="PaidSub.DonationOptionId" value="@o.Id" />
                                <button class="btn btn-danger">Купить</button>
                            </form>
                        }
                    </div>
                    count++;
                }
            }
        }

        @if (Model.DonationOptions != null && Model.DonationOptions.Any()) {
            <h4>Цели</h4>
            foreach (var o in Model.Goals) {
                <div class="border border-secondary p-2 mb-2 rounded border-2 bg-light">
                    <h5>@o.DonationOption.OptionName</h5>
                    <p>@o.DonationOption.Description</p>
                    <p>@o.TotalAmount/@o.DonationOption.Price собрано</p>
                    @if (!Model.IsOwner) {
                        <form asp-controller="Monetization" asp-action="PayGoal" method="post">
                            <input class="form-control" asp-for="PayGoal.Sended" />
                            <input hidden asp-for="PayGoal.AuthorId" value="@Model.CurrentUser.Id" />
                            <input hidden asp-for="PayGoal.DonationOptionId" value="@o.DonationOptionId" />
                            <button class="btn btn-danger m-1">Внести</button>
                        </form>
                    }
                    else {
                        <form asp-controller="Monetization" asp-action="DoneGoal" method="post">
                            <input hidden name="authorId" value="@o.DonationOption.AuthorId"/>
                            <input hidden name="goalId" value="@o.DonationOptionId" />
                            <button class="btn btn-danger m-1">Закрыть цель</button>
                        </form>
                    }
                </div>
            }
        }
        @if (Model.IsOwner)
        {
            <h4>Подписки</h4>
            <table class="table">
                <tbody>
                    @if (Model.Authors != null)
                    {
                        @foreach (var p in Model.Authors)
                        {
                            <tr>
                                <td class="text-start">@p.Author.UserName
                                    @await Component.InvokeAsync("AvatarPath", new { @p.Author.Id, html = "class=\"d-block border border-dark\"" })
                                </td>
                                <td>@await Component.InvokeAsync("UrlPath", new { id = @p.Author.Id })</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <div page-model="@Model.SubscribesPagingInfo" page-action="Index" type-page="authorPage"
            page-classes-enabled="true" page-class="btn" page-class-normal="btn-outline-dark"
                 page-class-selected="btn-primary" class="btn-group pull-right m-1">
            </div>
        }
    </div>
    <div class="col">
        <br/>
        <br/>
        @if (Model.CurrentUser.UserRoleId==(int)Cactus.Models.Enums.UserRole.Author) {
            <div>
                <span>@Model.CurrentAuthor.Description</span>
            </div>
        }
        @if (Model.IsOwner) {
            <div class="text-start">
                <a class="btn btn-danger m-1" asp-controller="post" asp-action="index">
                    Создать пост
                </a>
            </div>
        }
        else if (Model.PaidSubscribes != null && Model.PaidSubscribes.Any()) {
            PaidAuthorSubscribe sub = Model.PaidSubscribes.MaxBy(x=>x.Donator.DonationOption.Price);
            <div>
                <span>
                    @sub.Donator.DonationOption.OptionName, подписка заканчивается:
                    @sub.EndDate.ToLocalTime().AddTicks(@sub.StartDate.ToLocalTime().Ticks)
                </span>
            </div>
        }
        
        <div class="col">
            <h4>Посты</h4>
            <table class="table">
                <tbody>
                    @if (Model.Posts != null) {
                        @foreach (var p in Model.Posts) {
                            <tr>
                                <td>@p.Title</td>
                                <td class="ellipsis">@p.Description</td>
                                <td><a class="btn btn-primary" asp-page="/Post" asp-route-postId="@p.Id">Открыть</a></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <div page-model="@Model.PostsPagingInfo" page-action="Index" type-page="postPage"
                 page-classes-enabled="true" page-class="btn" page-class-normal="btn-outline-dark"
                 page-class-selected="btn-primary" class="btn-group pull-right m-1">
            </div>
        </div>
    </div>
    <div class="col-lg-2">
    </div>

    <div class="tab-pane fade show active" id="v-pills-profile" role="tabpanel" aria-labelledby="v-pills-profile-tab">
        <div class="modal fade" id="remittanceModal" tabindex="-1" aria-labelledby="remittanceModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="remittanceModalLabel">Отправить донат</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form class="" asp-controller="monetization" asp-action="remittance" method="post">
                            <span>Выберите сумму для отправления</span>
                            <input class="form-control" asp-for="Remittance.Sended" />
                            <input hidden asp-for="Remittance.AuthorId" value="@Model.CurrentUser.Id" />
                            <input hidden asp-for="Remittance.DonationOptionId" />
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-danger">Отправить</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="tab-pane fade show active" id="v-pills-profile" role="tabpanel" aria-labelledby="v-pills-profile-tab">
        <div class="modal fade" id="complainModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Пожаловаться</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form asp-controller="Complain" asp-action="AddComplain" method="post" enctype="multipart/form-data">
                            <input type="hidden" asp-for="NewComplain.ComplainTargetId" value="@Model.CurrentUser.Id" />
                            <input type="hidden" asp-for="NewComplain.ComplainTargetTypeId" value="@((int)Cactus.Models.Enums.ComplainTargetType.User)" />
                            <input type="hidden" asp-for="NewComplain.SenderId" value="@Convert.ToInt32(User.FindFirst("Id").Value)" />
                            <input type="hidden" asp-for="NewComplain.ReturnUrl" value="@ViewContext.HttpContext.Request.Path" />
                            <div>
                                <label asp-for="NewComplain.ComplainTypeId"></label>
                                <select class="form-select m-1" asp-for="NewComplain.ComplainTypeId" asp-items="Html.GetEnumSelectList<Cactus.Models.Enums.ComplainType>()"></select>
                            </div>
                            <div>
                                Описание жалобы
                                <span asp-validation-for="NewComplain.Description" class="text-danger"></span>
                                <textarea style="resize:none; height: 150px;" class="form-control m-1" asp-for="NewComplain.Description"></textarea>
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-danger">Отправить</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
    <style>
        .avatarProfile {
            width: 300px;
            height: 300px;
            margin: 0;
            padding: 0;
        }

        [src=""] {
            display: none;
        }

    .ellipsis {
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    </style>
    
